name: store

services:

    stock:
        profiles: [prod]
        build:
            context: ./stock
            dockerfile: Dockerfile
        ports:
            - '3030:3030' # host:container
        # Checks if db and rabbit are ready to accept connections
        depends_on:
            db:
                condition: service_healthy
            rabbitmq:
                condition: service_healthy
        environment:
            NODE_CONFIG: '{"postgresql": {"connection": {"host": "db", "port": 5432, "user": "$POSTGRES_USER", "password": "$POSTGRES_PASSWORD", "database": "stock"}}}'


    stock-dev:
        profiles: [dev]
        build:
            context: ./stock
            dockerfile: Dockerfile
        command: sh -c "npm run migrate && npm run dev"
        # nodemon fix
        # ref: https://docs.docker.com/compose/how-tos/file-watch/#example-1
        develop:
            watch:
                - action: sync
                  path: ./stock/src
                  target: /usr/src/app/src # Based on Dockerfile's WORKDIR
                  ignore:
                      - node_modules/
                - action: rebuild
                  path: ./stock/package.json
        hostname: stock
        ports:
            - '3030:3030' # host:container
        # Checks if db and rabbit are ready to accept connections
        depends_on:
            db:
                condition: service_healthy
            rabbitmq:
                condition: service_healthy
        environment:
            NODE_CONFIG: '{"postgresql": {"connection": {"host": "db", "port": 5432, "user": "$POSTGRES_USER", "password": "$POSTGRES_PASSWORD", "database": "stock"}}}'


    stock-history:
        profiles: [prod]
        build:
            context: ./stock
            dockerfile: Dockerfile
        ports:
            - '3031:3030' # host:container
        # Checks if db and rabbit are ready to accept connections
        depends_on:
            db:
                condition: service_healthy
            rabbitmq:
                condition: service_healthy
        environment:
            NODE_CONFIG: '{"postgresql": {"connection": {"host": "db", "port": 5432, "user": "$POSTGRES_USER", "password": "$POSTGRES_PASSWORD", "database": "stock_history"}}}'


    stock-history-dev:
        profiles: [dev]
        build:
            context: ./stock-history
            dockerfile: Dockerfile
        command: sh -c "npm run migrate && npm run dev"
        # nodemon fix
        # ref: https://docs.docker.com/compose/how-tos/file-watch/#example-1
        develop:
            watch:
                - action: sync
                  path: ./stock-history/src
                  target: /usr/src/app/src # Based on Dockerfile's WORKDIR
                  ignore:
                      - node_modules/
                - action: rebuild
                  path: ./stock-history/package.json
        hostname: stock-history
        ports:
            - '3031:3030' # host:container
        # Checks if db and rabbit are ready to accept connections
        depends_on:
            db:
                condition: service_healthy
            rabbitmq:
                condition: service_healthy
        environment:
            NODE_CONFIG: '{"postgresql": {"connection": {"host": "db", "port": 5432, "user": "$POSTGRES_USER", "password": "$POSTGRES_PASSWORD", "database": "stock_history"}}}'


    db:
        image: postgres:latest
        volumes:
            - pgdata:/var/lib/postgresql/data # Persists PostgreSQL data
        environment:
            POSTGRES_DB: postgres
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        # Makes possible `condition: service_healthy` check
        healthcheck:
            test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "$POSTGRES_USER" ]
            interval: 30s
            timeout: 60s
            retries: 5
            start_period: 80s  
        # (optional) Exposes database to the host machine
        ports:
            - '15432:5432' # host:container


    rabbitmq:
        image: rabbitmq:3-management
        container_name: rabbitmq
        healthcheck:
            test: rabbitmq-diagnostics check_port_connectivity
            interval: 30s
            timeout: 30s
            retries: 10
        ports:
            - 5672:5672
            - 15672:15672
        volumes:
            - rabbitmq_data:/var/lib/rabbitmq


volumes:
    pgdata: # Named volume to make PostgreSQL data persist
    rabbitmq_data: